###########################################################################
# Wikidata
#
# This dumps the data on software projects with arch package defined
###########################################################################
- name: wikidata
  type: site
  desc: Wikidata
  singular: Wikidata item
  family: wikidata
  ruleset: [ wikidata ]
  color: "339966"
  minpackages: 3000
  sources:
    - name: result.json
      fetcher:
        class: FileFetcher
        fetch_timeout: 300
        url: 'https://query.wikidata.org/sparql'
        post:
          format: json
          query: |
            # SPARQL request to get software information
            #
            # It's nested: while the inner request gathers information
            # for each version of specific software item, outer one aggregates
            # versions for each software project
            #
            # You may paste this into https://query.wikidata.org to play with the query
            SELECT
              ?project
              ?projectLabel
              ?projectDescription
              ?versions
              ?websites
              ?repositories
              ?licenses
              ?repology_projects
            WHERE {
              {
                SELECT
                  # the following query returns (versions) x (websites) x (license) x (repology_projects) x ...
                  # entries which are then grouped by project, and we always need DISTINCT below to remove
                  # duplicates
                  ?project
                  (
                    # concatenate all versions
                    GROUP_CONCAT(DISTINCT
                      # append flags to each version
                      CONCAT(
                        ?version,
                        ?versionSuffixes
                      ); separator='␞'
                    )
                    AS ?versions
                  )
                  (GROUP_CONCAT(DISTINCT ?website; separator='␞') as ?websites)
                  (GROUP_CONCAT(DISTINCT ?repository; separator='␞') as ?repositories)
                  (GROUP_CONCAT(DISTINCT ?license; separator='␞') as ?licenses)
                  (SAMPLE(?repology_projects) as ?repology_projects)
                WHERE {
                  {
                    SELECT
                      ?project
                      ?version
                      (
                        CONCAT(
                          GROUP_CONCAT(DISTINCT ?versionRankSuffix; separator=''),
                          GROUP_CONCAT(DISTINCT ?versionTypeSuffix; separator=''),
                          GROUP_CONCAT(DISTINCT ?versionOSSuffix; separator=''),
                          GROUP_CONCAT(DISTINCT ?versionPlatformSuffix; separator=''),
                          GROUP_CONCAT(DISTINCT ?downloadLinkConcatenable; separator='')
                        )
                        as ?versionSuffixes
                      )
                      (GROUP_CONCAT(DISTINCT ?repology_project; separator='␞') as ?repology_projects)
                    WHERE {
                      ?project wdt:P6931 ?repology_project .
  
                      # Versions for specific project
                      ?project p:P348 ?versionItem .
  
                      # Version number
                      ?versionItem ps:P348 ?version .
  
                      # Version rank
                      ?versionItem wikibase:rank ?versionRank .
  
                      FILTER (?versionRank != wikibase:DeprecatedRank)
  
                      BIND(
                        IF(
                          ?versionRank = wikibase:PreferredRank,
                          '|R',
                          ''
                        )
                        AS ?versionRankSuffix
                      )
  
                      # Version type (stable, unstable, ...)
                      OPTIONAL {
                        ?versionItem pq:P548 ?versionTypeItem .
                        BIND(
                          IF(
                            ?versionTypeItem = wd:Q2804309 ||   # stable version
                            ?versionTypeItem = wd:Q15726348 ||  # long-term support version
                            ?versionTypeItem = wd:Q18434478 ||  # maintenance version
                            ?versionTypeItem = wd:Q20631656 ||  # release
                            ?versionTypeItem = wd:Q48028851 ||  # patch version
                            ?versionTypeItem = wd:Q55567596 ||  # bug-fix version
                            ?versionTypeItem = wd:Q51937413 ||  # rolling release
                            ?versionTypeItem = wd:Q1491125,     # general availability version
                            '|S',
                            IF(
                              ?versionTypeItem = wd:Q1072356 ||   # release candidate version
                              ?versionTypeItem = wd:Q2122918 ||   # software alpha version
                              ?versionTypeItem = wd:Q21727724 ||  # unstable version
                              ?versionTypeItem = wd:Q23356219 ||  # pre-alpha version
                              ?versionTypeItem = wd:Q3295609 ||   # beta version
                              ?versionTypeItem = wd:Q51930650,    # pre-release version
                              '|U',
                              IF(
                                ?versionTypeItem = wd:Q6736813 ||  # legacy version
                                ?versionTypeItem = wd:Q21683863 || # obsolete version
                                ?versionTypeItem = wd:Q56514665,   # initial version
                                '',   # ignore meaningless types
                                '|X'  # devel/daily/rolling and incorrect
                              )
                            )
                          )
                          AS ?versionTypeSuffix
                        )
                      }
                      # remove these (non-)versions completely
                      FILTER (COALESCE(?versionTypeItem != wd:Q3133388, TRUE))  # trunk
  
                      # Version os
                      # See VLC package; there's different versioning schemas for different OSes
                      # and we need to filter out e.g. iOS releases
                      # As with version types, we reduct this to just two flags: where there was
                      # Linux release and whether there were non-Linux release. When parsing, we'll
                      # ignore versions with OS defined, but no Linux
                      OPTIONAL {
                        ?versionItem pq:P306 ?versionOSItem  .
                        BIND(
                          IF(
                            ?versionOSItem = wd:Q388,  # Linux
                            '|O',
                            '|o'
                          )
                          AS ?versionOSSuffix
                        )
                      }
                      # same for platform
                      # we go blacklist way here though as people use too much unrelated stuff
                      # as platform (hardware platforms, operating systems, gui toolkits etc)
                      OPTIONAL {
                        ?versionItem pq:P400 ?versionPlatformItem  .
                        BIND(
                          CONCAT(
                            # blacklist
                            IF(
                              ?versionPlatformItem = wd:Q189210 ||   # web application
                              ?versionPlatformItem = wd:Q7096284 ||  # Web Platform
                              ?versionPlatformItem = wd:Q4885200 ||  # Windows Phone
                              ?versionPlatformItem = wd:Q14116 ||    # macOS
                              ?versionPlatformItem = wd:Q1406 ||     # Microsoft Windows
                              ?versionPlatformItem = wd:Q94 ||       # Android
                              ?versionPlatformItem = wd:Q48493 ||    # iOS
                              ?versionPlatformItem = wd:Q2766 ||     # iPhone
                              ?versionPlatformItem = wd:Q2796 ||     # iPad
                              ?versionPlatformItem = wd:Q13361286,   # XBox one
                              '|p',
                              ''
                            ),
                            # whitelist
                            IF(
                              ?versionPlatformItem = wd:Q388,        # Linux
                              '|P',
                              ''
                            )
                          )
                          AS ?versionPlatformSuffix
                        )
                      }
  
                      # download links
                      OPTIONAL {
                        ?versionItem pq:P4945 ?downloadLink .
  
                        BIND(CONCAT('|', STR(?downloadLink)) AS ?downloadLinkConcatenable)
                      }
                    }
                    GROUP BY ?project ?version
                  }
  
                  # Licenses, resolved to labels (e.g. human readable names)
                  OPTIONAL {
                    ?project wdt:P275 ?licenseItem .
                    ?licenseItem rdfs:label ?license .
                    FILTER (LANG(?license) = 'en')
                  }
  
                  # official website
                  OPTIONAL { ?project wdt:P856 ?website . }
  
                  # source code repository
                  OPTIONAL { ?project wdt:P1324 ?repository . }
                }
                GROUP BY ?project
              }
  
              # provides ?projectLabel and ?projectDescription
              SERVICE wikibase:label { bd:serviceParam wikibase:language 'en'. }
            }
      parser:
        class: WikidataJsonParser
  repolinks:
    - desc: Wikidata home
      url: "https://wikidata.org/"
  packagelinks:
    - type: PACKAGE_HOMEPAGE
      url: "https://www.wikidata.org/wiki/{srcname}"
  groups: [ all, production ]

# Some additional useful requests
#
# - List all software which is available for Linux or Unix-Like OSes with their package names
#   Use this to find missing package names
#
# https://query.wikidata.org/#SELECT%0A %3Fproject%0A %3FprojectLabel%0A (GROUP_CONCAT(DISTINCT %3Farch) AS %3Farch)%0A (GROUP_CONCAT(DISTINCT %3Faur) AS %3Faur)%0A (GROUP_CONCAT(DISTINCT %3Fdebian) AS %3Fdebian)%0A (GROUP_CONCAT(DISTINCT %3Ffedora) AS %3Ffedora)%0A (GROUP_CONCAT(DISTINCT %3Fgentoo) AS %3Fgentoo)%0A (GROUP_CONCAT(DISTINCT %3Fubuntu) AS %3Fubuntu)%0AWHERE { %0A %3Fproject wdt%3AP348 %3Fversion . %23 Require version%0A %3Fproject wdt%3AP306 %3Fos . %23 Require OS%0A %0A FILTER(%3Fos %3D wd%3AQ14646 || %3Fos %3D wd%3AQ388) %23 Require OS to be "Unix-like" or "Linux"%0A%0A OPTIONAL { %3Fproject wdt%3AP3454 %3Farch . }%0A OPTIONAL { %3Fproject wdt%3AP4162 %3Faur . }%0A OPTIONAL { %3Fproject wdt%3AP3442 %3Fdebian . }%0A OPTIONAL { %3Fproject wdt%3AP3463 %3Ffedora . }%0A OPTIONAL { %3Fproject wdt%3AP3499 %3Fgentoo . }%0A OPTIONAL { %3Fproject wdt%3AP3473 %3Fubuntu . }%0A %0A SERVICE wikibase%3Alabel { bd%3AserviceParam wikibase%3Alanguage 'en'. }%0A}%0AGROUP BY %3Fproject %3FprojectLabel%0AORDER BY %3FprojectLabel
#
# - Same, but with some packages missing
# https://query.wikidata.org/#SELECT%0A%20%3Fproject%0A%20%3FprojectLabel%0A%20%28GROUP_CONCAT%28DISTINCT%20%3Farch%29%20AS%20%3Farch%29%0A%20%28GROUP_CONCAT%28DISTINCT%20%3Faur%29%20AS%20%3Faur%29%0A%20%28GROUP_CONCAT%28DISTINCT%20%3Fdebian%29%20AS%20%3Fdebian%29%0A%20%28GROUP_CONCAT%28DISTINCT%20%3Ffedora%29%20AS%20%3Ffedora%29%0A%20%28GROUP_CONCAT%28DISTINCT%20%3Fgentoo%29%20AS%20%3Fgentoo%29%0A%20%28GROUP_CONCAT%28DISTINCT%20%3Fubuntu%29%20AS%20%3Fubuntu%29%0AWHERE%20%7B%0A%20%3Fproject%20wdt%3AP348%20%3Fversion%20.%20%23%20Require%20version%0A%20%3Fproject%20wdt%3AP306%20%3Fos%20.%20%23%20Require%20OS%0A%20%0A%20FILTER%28%3Fos%20%3D%20wd%3AQ14646%20%7C%7C%20%3Fos%20%3D%20wd%3AQ388%29%20%23%20Require%20OS%20to%20be%20%22Unix-like%22%20or%20%22Linux%22%0A%0A%20OPTIONAL%20%7B%20%3Fproject%20wdt%3AP3454%20%3Farch%20.%20%7D%0A%20OPTIONAL%20%7B%20%3Fproject%20wdt%3AP4162%20%3Faur%20.%20%7D%0A%20OPTIONAL%20%7B%20%3Fproject%20wdt%3AP3442%20%3Fdebian%20.%20%7D%0A%20OPTIONAL%20%7B%20%3Fproject%20wdt%3AP3463%20%3Ffedora%20.%20%7D%0A%20OPTIONAL%20%7B%20%3Fproject%20wdt%3AP3499%20%3Fgentoo%20.%20%7D%0A%20OPTIONAL%20%7B%20%3Fproject%20wdt%3AP3473%20%3Fubuntu%20.%20%7D%0A%0A%20FILTER%28%28%21BOUND%28%3Farch%29%20%26%26%20%21BOUND%28%3Faur%29%29%20%7C%7C%20%21BOUND%28%3Fdebian%29%20%7C%7C%20%21BOUND%28%3Ffedora%29%20%7C%7C%20%21BOUND%28%3Fgentoo%29%20%7C%7C%20%21BOUND%28%3Fubuntu%29%29%0A%20%0A%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%27en%27.%20%7D%0A%7D%0AGROUP%20BY%20%3Fproject%20%3FprojectLabel%0AORDER%20BY%20%3FprojectLabel
#
# - Entries with Repology project name defined, but with no versions
# https://query.wikidata.org/#SELECT %3Fproject %3FprojectLabel %3Frepology_project%20 WHERE { %0A%20 %3Fproject wdt%3AP6931 %3Frepology_project .%0A%20 FILTER NOT EXISTS { %3Fproject wdt%3AP348 %3Fversion . }%0A%20 SERVICE wikibase%3Alabel { bd%3AserviceParam wikibase%3Alanguage 'en'. }%0A}
#
# - All version types
# https://query.wikidata.org/#SELECT%20%3Fitem%20%3FitemLabel%20%7B%0A%20%20%3Fitem%20wdt%3AP31%20wd%3AQ28530564%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22%5BAUTO_LANGUAGE%5D%22%20%7D%0A%7D%20ORDER%20BY%20%3Fitem
